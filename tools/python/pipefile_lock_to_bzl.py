#!/usr/bin/env python3
"""Transform a Pipfile.lock file to a third_party/python/requirements.bzl file."""

import argparse
import json

# The following packages are considered to be unsafe in a requirements file
_UNSAFE_PACKAGES = {'pip', 'setuptools'}

_HEAD = """\"\"\"Starlark representation of locked requirements.

Generated by tools/python/pipefile_lock_to_bzl.py from {input_file}.\"\"\"

load("@rules_python//python/pip_install:pip_repository.bzl", "whl_library")
load("@rules_python//python/pip_install:repositories.bzl", "pip_install_dependencies")
"""

_STUB = """def _clean_name(name):
    return name.replace("-", "_").replace(".", "_").lower()

def requirement(name):
    return "@{ns}_" + _clean_name(name) + "//:pkg"

def whl_requirement(name):
    return "@{ns}_" + _clean_name(name) + "//:whl"

def data_requirement(name):
    return "@{ns}_" + _clean_name(name) + "//:data"

def dist_info_requirement(name):
    return "@{ns}_" + _clean_name(name) + "//:dist_info"

def entry_point(pkg, script = None):
    if not script:
        script = pkg
    return "@{ns}_" + _clean_name(pkg) + "//:rules_python_wheel_entry_point_" + script

def install_deps(interpreter):
    pip_install_dependencies()
    _config = {{
        "enable_implicit_namespace_pkgs": False,
        "environment": {{}},
        "extra_pip_args": [],
        "isolated": True,
        "pip_data_exclude": [],
        "python_interpreter": "python3",
        "python_interpreter_target": interpreter,
        "quiet": True,
        "repo": "{ns}",
        "repo_prefix": "{ns}_",
        "timeout": 600,
    }}
    for name, requirement in _packages:
        whl_library(
            name = name,
            requirement = requirement,
            **_config
        )
"""


def _clean_name(name):
    return name.replace("-", "_").replace(".", "_").lower()


def data(lock):
    for k, v in sorted((lock['default'] | lock['develop']).items()):
        if k in _UNSAFE_PACKAGES:
            continue
        yield k, v


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("input", help="Pipfile.lock file path")
    parser.add_argument("--namespace", default="pip")
    args = parser.parse_args()

    with open(args.input) as f:
        lock = json.load(f)

    print(_HEAD.format(input_file=args.input))
    print('all_requirements = [')
    for k, v in data(lock):
        print(f"    \"@{args.namespace}_{_clean_name(k)}//:pkg\",")
    print(']')
    print('')
    print('all_whl_requirements = [')
    for k, v in data(lock):
        print(f"    \"@{args.namespace}_{_clean_name(k)}//:whl\",")
    print(']')
    print('')
    print('_packages = [')
    for k, v in data(lock):
        req = f"{k}{v['version']}"
        for h in v['hashes']:
            req += f"     --hash={h}"
        if 'markers' in v.keys():
            m = v['markers'].replace('\'', '"')
            req += f" ; {m}"
        print(f"    ('{args.namespace}_{_clean_name(k)}', '{req}'),")
    print(']')
    print('')
    print(_STUB.format(ns=args.namespace), end='')


if __name__ == "__main__":
    main()
