module(
    name = "everest",
)

bazel_dep(name = "aspect_rules_js", version = "2.1.0")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

bazel_dep(name = "aspect_rules_ts", version = "3.2.1")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "buildifier_prebuilt", version = "7.3.1")
bazel_dep(name = "contrib_rules_jvm", version = "0.27.0")
bazel_dep(name = "fmt", version = "11.0.2")
bazel_dep(name = "gazelle", version = "0.39.1", repo_name = "bazel_gazelle")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
go_deps.gazelle_override(
    directives = [
        "gazelle:go_naming_convention go_default_library",
    ],
    path = "github.com/google/cel-go",
)
go_deps.gazelle_override(
    directives = [
        # The following should not be required after the next gazelle release given
        # https://github.com/bazelbuild/bazel-gazelle/commit/b3cddc07edbede6dd7a5c311aac7ac06660aecf0
        "gazelle:proto disable",
    ],
    path = "google.golang.org/protobuf",
)
use_repo(
    go_deps,
    "com_github_antlr4_go_antlr_v4",
    "com_github_aristanetworks_goarista",
    "com_github_cockscomb_cel2sql",
    "com_github_google_cel_go",
    "com_github_google_go_cmp",
    "com_github_google_go_github_v64",
    "com_github_google_uuid",
    "com_github_gosuri_uiprogress",
    "com_github_grpc_ecosystem_go_grpc_middleware_v2",
    "com_github_honeycombio_otel_config_go",
    "com_github_keybase_go_keychain",
    "com_github_mndrix_tap_go",
    "com_github_mvdan_sh",
    "com_github_pkg_browser",
    "com_github_prometheus_client_golang",
    "com_github_prometheus_client_model",
    "com_github_prometheus_common",
    "com_github_rs_zerolog",
    "com_github_stretchr_testify",
    "com_github_whilp_git_urls",
    "com_github_zenazn_goji",
    "io_gorm_driver_sqlite",
    "io_gorm_gorm",
    "io_opentelemetry_go_contrib_instrumentation_google_golang_org_grpc_otelgrpc",
    "org_golang_google_genproto_googleapis_api",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
    "org_golang_x_tools",
    "tech_einride_go_aip",
)

bazel_dep(name = "gflags", version = "2.2.2")
bazel_dep(name = "googleapis", version = "0.0.0-20240819-fe8ba054a")
bazel_dep(name = "googletest", version = "1.15.2")
bazel_dep(name = "grpc", version = "1.66.0.bcr.2")
bazel_dep(name = "grpc-java", version = "1.66.0")
bazel_dep(name = "rules_cc", version = "0.0.13")
bazel_dep(name = "rules_cue", version = "0.8.1")
bazel_dep(name = "rules_foreign_cc", version = "0.12.0")
bazel_dep(name = "rules_go", version = "0.50.1")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.22.2")
go_sdk.nogo(nogo = "@//tools/nogo")

bazel_dep(name = "rules_ruby", version = "0.13.0")

ruby = use_extension("@rules_ruby//ruby:extensions.bzl", "ruby")
ruby.toolchain(
    name = "ruby",
    version_file = "//:.ruby-version",
)
use_repo(ruby, "ruby")
ruby.bundle_fetch(
    name = "bundle",
    gem_checksums = {
        "ast-2.4.2": "1e280232e6a33754cde542bc5ef85520b74db2aac73ec14acef453784447cc12",
        "cgi-0.3.6": "c5e2c301437116b28fdfbb565452b9c1ee597901e68611367b4126b5d10feca3",
        "cgi-0.3.6-java": "f94886a613c101f2f60c2e33ea8a42d6ad0b9a5fcda3d550e01f35b0271585af",
        "diff-lcs-1.5.1": "273223dfb40685548436d32b4733aa67351769c7dea621da7d9dd4813e63ddfe",
        "erb-4.0.4": "de116e106205c46bc01918789b611aaad1328dcc6e9f12cf8cd2cc60ef619717",
        "erb-4.0.4-java": "3767088f230194a84316a5879f0c3dc5f2a96fb1c9a198c3e27d3f35d416c597",
        "haml-6.3.0": "8e6eb87d869639e348852009e74a2a1663d79663ed7e7dbcb38beb1f12bcdd97",
        "json-2.7.2": "1898b5cbc81cd36c0fd4d0b7ad2682c39fb07c5ff682fc6265f678f550d4982c",
        "json-2.7.2-java": "138e3038b5361b3d06ee2e8aa2be00bed0d0de4ef5f1553fc5935e5b93aca7ee",
        "language_server-protocol-3.17.0.3": "3d5c58c02f44a20d972957a9febe386d7e7468ab3900ce6bd2b563dd910c6b3f",
        "parallel-1.26.3": "d86babb7a2b814be9f4b81587bf0b6ce2da7d45969fab24d8ae4bf2bb4d4c7ef",
        "parser-3.3.5.0": "f30ebb71b7830c2e7cdc4b2b0e0ec2234900e3fca3fe2fba47f78be759181ab3",
        "racc-1.8.1": "4a7f6929691dbec8b5209a0b373bc2614882b55fc5d2e447a21aaa691303d62f",
        "racc-1.8.1-java": "54f2e6d1e1b91c154013277d986f52a90e5ececbe91465d29172e49342732b98",
        "rainbow-3.1.1": "039491aa3a89f42efa1d6dec2fc4e62ede96eb6acd95e52f1ad581182b79bc6a",
        "regexp_parser-2.9.2": "5a27e767ad634f8a4b544520d5cd28a0db7aa1198a5d7c9d7e11d7b3d9066446",
        "rspec-3.13.0": "d490914ac1d5a5a64a0e1400c1d54ddd2a501324d703b8cfe83f458337bab993",
        "rspec-core-3.13.0": "557792b4e88da883d580342b263d9652b6a10a12d5bda9ef967b01a48f15454c",
        "rspec-expectations-3.13.0": "621d48c62262f955421eaa418130744760802cad47e781df70dba4d9f897102e",
        "rspec-its-1.3.0": "4da51040e7820daafd40f2f6216d13c90aa949f0d302a0412c9ef6074e73ea97",
        "rspec-mocks-3.13.0": "735a891215758d77cdb5f4721fffc21078793959d1f0ee4a961874311d9b7f66",
        "rspec-support-3.13.0": "0e725f53b8c20ce75913a5da7bf06bf90698266951f3b1e3ae7bcd9612775257",
        "rubocop-1.66.1": "0679c263b1164fd003b8590ae83b3e9e9bf72282d411755f227f1d6268ee5ee7",
        "rubocop-ast-1.32.2": "8ef87dd10dccce68b86dc41ab4f0926dbc0e6dd61d848fd806681aeb92fd2e6b",
        "rubocop-rspec-3.0.4": "eb4ffa14a6be7e722f6c5dc48759356753e714f32ed4adbeddf14057694ec11d",
        "ruby-progressbar-1.13.0": "80fc9c47a9b640d6834e0dc7b3c94c9df37f08cb072b7761e4a71e22cff29b33",
        "slim-5.2.1": "72351dff7e2ff20e2d5c393cfc385bb9142cef5db059141628fd7163ac3c13e7",
        "temple-0.10.3": "df3145fe6577af1e25387eb7f7122d32ed51bdb6f2e7bb0f4fbf07b66151913b",
        "thor-1.3.2": "eef0293b9e24158ccad7ab383ae83534b7ad4ed99c09f96f1a6b036550abbeda",
        "tilt-2.4.0": "df74f29a451daed26591a85e8e0cebb198892cb75b6573394303acda273fba4d",
        "unicode-display_width-2.5.0": "7e7681dcade1add70cb9fda20dd77f300b8587c81ebbd165d14fd93144ff0ab4",
    },
    gemfile = "//:Gemfile",
    gemfile_lock = "//:Gemfile.lock",
)
use_repo(ruby, "bundle", "ruby_toolchains")

register_toolchains("@ruby_toolchains//:all")

bazel_dep(name = "rules_rust", version = "0.47.1")
single_version_override(
    module_name = "rules_rust",
    patch_strip = 1,
    patches = [
        # rules_rust and modern protoc collide on protoc-gen-rust and create
        # the following error message:
        #
        # --rust_out: helloworld/helloworld.proto: The Rust codegen is highly experimental.
        # Future versions will break existing code. Use at your own risk. You can opt-in
        # by passing 'experimental-codegen=enabled' to '--rust_out'.
        #
        # This error message is also metionned in https://github.com/protocolbuffers/protobuf/issues/13346.
        #
        # Instead we rename the rules_rust protoc proto and grpc plugin to
        # denote rules_rust wants its own code ran, not the experiemental
        # code from the protobuf repository.
        #
        # All this is reported upstream in https://github.com/bazelbuild/rules_rust/issues/2837.
        "//third_party/rules_rust:0001-rust-proto-experimental.patch",
    ],
)

# Use a more modern version of protobuf to work around rules_rust using
# an old one and grpc-java needed a modern one. See:
#
# - https://github.com/bazelbuild/rules_rust/issues/302
# - https://github.com/grpc/grpc-java/issues/11015
single_version_override(
    module_name = "protobuf",
    version = "29.0-rc1",
)

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.78.0"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.from_cargo(
    name = "everest_crates",  # FIXME protobuf uses the name "crates", so we namespace ours
    cargo_lockfile = "//:Cargo.lock",
    manifests = [
        "//:Cargo.toml",
        "//src/rust/cel:Cargo.toml",
        "//src/rust/grpc_server:Cargo.toml",
        "//src/rust/hello_world:Cargo.toml",
        "//src/rust/luhn:Cargo.toml",
        "//src/rust/num:Cargo.toml",
        "//src/rust/web:Cargo.toml",
    ],
)
use_repo(crate, "everest_crates")

bazel_dep(name = "rules_haskell", version = "0.19")

haskell_toolchains = use_extension("@rules_haskell//extensions:haskell_toolchains.bzl", "haskell_toolchains")
haskell_toolchains.bindists(
    # Pick a version from https://www.haskell.org/ghc/download.html that matches the LTS snapshot below.
    version = "9.6.4",
)

stack_snapshot = use_extension("@rules_haskell//extensions:stack_snapshot.bzl", "stack_snapshot")
use_repo(stack_snapshot, "stackage")
stack_snapshot.snapshot(
    # Pick an LTS from https://www.stackage.org/snapshots
    name = "lts-22.11",
)

[
    stack_snapshot.package(
        name = pkg,
    )
    for pkg in [
        "base",
        "HUnit",
        "optparse-applicative",
    ]
]

stack_snapshot.stack_snapshot_json(
    label = "//third_party/haskell:stackage_snapshot.json",
)

bazel_dep(name = "rules_java", version = "7.12.1")
bazel_dep(name = "rules_jni", version = "0.10.1")
bazel_dep(name = "rules_jvm_external", version = "6.4")

JUNIT_VERSION = "5.10.2"

JUNIT_PLATFORM_VERSION = "1.10.2"

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "com.google.googlejavaformat:google-java-format:1.24.0",
        "commons-cli:commons-cli:1.9.0",
        "dev.cel:cel:0.7.1",
        "org.junit.jupiter:junit-jupiter-api:" + JUNIT_VERSION,
        "org.junit.jupiter:junit-jupiter-engine:" + JUNIT_VERSION,
        "org.junit.platform:junit-platform-launcher:" + JUNIT_PLATFORM_VERSION,
        "org.junit.platform:junit-platform-reporting:" + JUNIT_PLATFORM_VERSION,
        "org.junit.vintage:junit-vintage-engine:" + JUNIT_VERSION,
    ],
    fail_if_repin_required = True,
    lock_file = "//third_party/java:maven_install.json",
    repositories = [
        "https://jcenter.bintray.com/",
        "https://maven.google.com",
        "https://repo1.maven.org/maven2",
    ],
)
use_repo(maven, "maven", "unpinned_maven")

bazel_dep(name = "rules_kotlin", version = "1.9.6")
bazel_dep(name = "rules_nodejs", version = "6.3.1")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(
    name = "nodejs",
    node_version = "20.10.0",
)

bazel_dep(name = "rules_oci", version = "2.0.1")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_base",
    digest = "sha256:ccaef5ee2f1850270d453fdf700a5392534f8d1a8ca2acda391fbb6a06b81c86",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)
use_repo(oci, "distroless_base", "distroless_base_linux_amd64", "distroless_base_linux_arm64")

bazel_dep(name = "rules_perl", version = "0.2.3.bcr.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_proto", version = "6.0.2")
bazel_dep(name = "rules_python", version = "0.35.0")

python_version = "3.12"

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(python_version = python_version)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = python_version,
    requirements_lock = "//third_party/python:requirements_lock.txt",
)
use_repo(pip, "pip")
