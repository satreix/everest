module(
    name = "everest",
)

bazel_dep(name = "aspect_rules_js", version = "1.38.0")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

bazel_dep(name = "aspect_rules_ts", version = "2.1.1")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")

bazel_dep(name = "buildifier_prebuilt", version = "6.4.0")
bazel_dep(name = "gflags", version = "2.2.2")
bazel_dep(name = "googletest", version = "1.14.0")
bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "rules_cue", version = "0.5.0")
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")
bazel_dep(name = "rules_go", version = "0.46.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "gazelle", version = "0.35.0", repo_name = "bazel_gazelle")

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.22.0")
go_sdk.nogo(nogo = "@//tools/nogo")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
go_deps.gazelle_override(
    directives = [
        "gazelle:go_naming_convention go_default_library",
    ],
    path = "github.com/google/cel-go",
)
use_repo(
    go_deps,
    "com_github_antlr4_go_antlr_v4",
    "com_github_aristanetworks_goarista",
    "com_github_cockscomb_cel2sql",
    "com_github_google_cel_go",
    "com_github_google_go_cmp",
    "com_github_google_go_github_v59",
    "com_github_google_uuid",
    "com_github_gosuri_uiprogress",
    "com_github_grpc_ecosystem_go_grpc_middleware_v2",
    "com_github_honeycombio_honeycomb_opentelemetry_go",
    "com_github_honeycombio_otel_config_go",
    "com_github_keybase_go_keychain",
    "com_github_mndrix_tap_go",
    "com_github_mvdan_sh",
    "com_github_pkg_browser",
    "com_github_prometheus_client_golang",
    "com_github_prometheus_client_model",
    "com_github_prometheus_common",
    "com_github_rs_zerolog",
    "com_github_stretchr_testify",
    "com_github_whilp_git_urls",
    "com_github_zenazn_goji",
    "io_gorm_driver_sqlite",
    "io_gorm_gorm",
    "io_opentelemetry_go_contrib_instrumentation_google_golang_org_grpc_otelgrpc",
    "org_golang_google_genproto_googleapis_api",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
    "org_golang_x_tools",
    "tech_einride_go_aip",
)

bazel_dep(name = "rules_haskell", version = "0.19")

haskell_toolchains = use_extension("@rules_haskell//extensions:haskell_toolchains.bzl", "haskell_toolchains")
haskell_toolchains.bindists(
    # Pick a version from https://www.haskell.org/ghc/download.html that matches the LTS snapshot below.
    version = "9.6.4",
)

stack_snapshot = use_extension("@rules_haskell//extensions:stack_snapshot.bzl", "stack_snapshot")
use_repo(stack_snapshot, "stackage")
stack_snapshot.snapshot(
    # Pick an LTS from https://www.stackage.org/snapshots
    name = "lts-22.11",
)

[
    stack_snapshot.package(
        name = pkg,
    )
    for pkg in [
        "base",
        "HUnit",
        "optparse-applicative",
    ]
]

bazel_dep(name = "rules_java", version = "7.4.0")
bazel_dep(name = "rules_jni", version = "0.9.1")
bazel_dep(name = "rules_kotlin", version = "1.9.0")
bazel_dep(name = "rules_nodejs", version = "6.0.3")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(
    name = "nodejs",
    node_version = "20.10.0",
)

bazel_dep(name = "rules_oci", version = "1.7.2")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_base",
    digest = "sha256:ccaef5ee2f1850270d453fdf700a5392534f8d1a8ca2acda391fbb6a06b81c86",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)
use_repo(oci, "distroless_base")

bazel_dep(name = "rules_perl", version = "0.2.0")
bazel_dep(name = "rules_pkg", version = "0.10.1")
bazel_dep(name = "rules_proto", version = "5.3.0-21.7")
bazel_dep(name = "rules_python", version = "0.31.0")

python_version = "3.12"

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(python_version = python_version)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = python_version,
    requirements_lock = "//third_party/python:requirements_lock.txt",
)
use_repo(pip, "pip")
